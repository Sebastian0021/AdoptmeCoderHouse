paths:
  /api/users:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        "200":
          description: Lista de todos los usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: Error interno del servidor.

  /api/users/{uid}:
    get:
      summary: Obtiene un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a obtener.
          schema:
            type: string
      responses:
        "200":
          description: Datos del usuario.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Usuario no encontrado.
    put:
      summary: Actualiza un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a actualizar.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "200":
          description: Usuario actualizado exitosamente.
        "404":
          description: Usuario no encontrado.
    delete:
      summary: Elimina un usuario por su ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario a eliminar.
          schema:
            type: string
      responses:
        "200":
          description: Usuario eliminado exitosamente.
        "404":
          description: Usuario no encontrado.

  /api/users/{uid}/documents:
    post:
      summary: Sube uno o múltiples documentos para un usuario
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario al que se le cargarán los documentos.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Archivos a subir.
      responses:
        "200":
          description: Documentos subidos exitosamente.
        "400":
          description: No se proporcionaron archivos.
        "404":
          description: Usuario no encontrado.

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado por MongoDB.
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
        pets:
          type: array
          items:
            type: string
            description: ID de una mascota.
        documents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              reference:
                type: string
        last_connection:
          type: string
          format: date-time
    UserInput:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
